
									
										
											
											
												
												//check if the user is receiving
												db.query( 'SELECT * FROM orders WHERE receiver = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
													if( err ) throw err;
													if( results.length === 0 ){
														//check for paid paymets
														db.query( 'SELECT * FROM orders WHERE payer = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
															if( err ) throw err;
															if ( results.length === 0 ){
																// check for earnings
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, news: news,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', feederearn: feederearn, feederbonus: feederbonus, total: total,news: news,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', feederearn: feederearn, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance,news: news, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}else{
																var payer = results;
																var info = 'YOU HAVE AN ORDER TO PAY SOMEONE!';
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', payer: payer, info: info, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, news: news,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', payer: payer, info: info, feederearn: feederearn, feederbonus: feederbonus, total: total,news: news,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', payer: payer, info: info, feederearn: feederearn, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance,news: news, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}
														});
													}else{
														var receiver = results;
														var order = 'SOMEONE WANTS TO PAY YOU!';
														db.query( 'SELECT * FROM order WHERE payer = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
															if( err ) throw err;
															if ( results.length === 0 ){
																// check for earnings
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', receiver: receiver, info: order, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, news: news,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', receiver: receiver, info: order, feederearn: feederearn, feederbonus: feederbonus, total: total,news: news,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', feederearn: feederearn, receiver: receiver, info: order, a: tree.a, receiver: receiver, info: order, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance,news: news, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}else{
																var payer = results;
																var order = 'YOU HAVE AN ORDER TO PAY SOMEONE!';
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', receiver: receiver, info: order, payer: payer, info: order, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, news: news,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', payer: payer, info: order, receiver: receiver, info: order, feederearn: feederearn, feederbonus: feederbonus, total: total,news: news,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', payer: payer, info: order, feederearn: feederearn, receiver: receiver, info: order, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance,news: news, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}
														});
													}
												});
											});
										}
									});
								}
							});
						});
					}else{
						//if an admin
						var admin = results[0].user;
						db.query( 'SELECT username FROM user WHERE user_id = ?', [currentUser], function ( err, results, fields ){
							if( err ) throw err;
							var username = results[0].username;
							//check if the user has updated his profile
							db.query( 'SELECT user FROM profile WHERE user = ?', [username], function ( err, results, fields ){
								if( err ) throw err;
								if( results.length === 0 ){
									var error = 'Please update your profile to see your stats.';
									res.render( 'dashboard', {admin: admin, title: 'DASHBOARD', news: news, error: error});
								}else{
									db.query( 'SELECT user FROM feeder WHERE user = ?', [username], function ( err, results, fields ){
										if( err ) throw err;
										if (results.length === 0){
											var message = 'You have not entered the matrix yet. Please enter the matrix';
											var feedentrance = 0; 
											var totalentrance = 0;
											var feederearn = 0;
											var feederbonus  = 0;
											var total = 0;
											res.render('dashboard', {admin: admin, title: 'DASHBOARD', news: news, feederearn: feederearn, total: total, feedentrance: feedentrance, totalentrance: totalentrance, noenter: message, news: news, feederbonus: feederbonus, message: message});
										}else{
											//check the number of times he has entered the feeder stage
											db.query( 'SELECT COUNT(user) AS number FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
												if( err ) throw err;
												var feedentrance = results[0].number;
												var totalentrance = 0 + feedentrance;
												//check if the user is receiving
												db.query( 'SELECT * FROM order WHERE receiver = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
													if( err ) throw err;
													if( results.length === 0 ){
														//check for paid paymets
														db.query( 'SELECT * FROM order WHERE payer = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
															if( err ) throw err;
															if ( results.length === 0 ){
																// check for earnings
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {admin: admin, title: 'DASHBOARD', feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, news: news,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', feederearn: feederearn, feederbonus: feederbonus, total: total,news: news,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', feederearn: feederearn, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance,news: news, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}else{
																var payer = results;
																var info = 'YOU HAVE AN ORDER TO PAY SOMEONE!';
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: info, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, news: news,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: info, feederearn: feederearn, feederbonus: feederbonus, total: total,news: news,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: info, feederearn: feederearn, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance,news: news, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}
														});
													}else{
														var receiver = results;
														var order = 'SOMEONE WANTS TO PAY YOU!';
														db.query( 'SELECT * FROM order WHERE payer = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
															if( err ) throw err;
															if ( results.length === 0 ){
																// check for earnings
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', receiver: receiver, admin: admin, info: order, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, news: news,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', admin: admin, receiver: receiver, info: order, feederearn: feederearn, feederbonus: feederbonus, total: total,news: news,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', admin: admin, feederearn: feederearn, receiver: receiver, info: order, a: tree.a, receiver: receiver, info: order, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance,news: news, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}else{
																var payer = results;
																var order = 'YOU HAVE AN ORDER TO PAY SOMEONE!';
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', admin: admin, receiver: receiver, info: order, payer: payer, info: order, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, news: news,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: order, receiver: receiver, info: order, feederearn: feederearn, feederbonus: feederbonus, total: total,news: news,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: order, feederearn: feederearn, receiver: receiver, info: order, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance,news: news, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}
														});
													}
												});
											});
										}
									});
								}
							});
						});
					}
				});
			});
		}else{
			//if no news that is, the user has seen the news before.
			//db.query( 'SELECT subject FROM info', function ( err, results, fields ){
				//if ( err ) throw err;
				//var news = results[0].subject;
				//check if the person is an admin or not
				db.query( 'SELECT user FROM admin WHERE user = ?', [currentUser], function ( err, results, fields ){
					if( err ) throw err;
					if( results.length === 0 ){
						db.query( 'SELECT username FROM user WHERE user_id = ?', [currentUser], function ( err, results, fields ){
							if( err ) throw err;
							var username = results[0].username;
							//check if the user has updated his profile
							db.query( 'SELECT user FROM profile WHERE user = ?', [username], function ( err, results, fields ){
								if( err ) throw err;
								if( results.length === 0 ){
									var error = 'Please update your profile to see your stats.';
									res.render( 'dashboard', {title: 'DASHBOARD', error: error});
								}else{
									db.query( 'SELECT user FROM feeder WHERE user = ?', [username], function ( err, results, fields ){
										if( err ) throw err;
										if (results.length === 0){
											var message = 'You have not entered the matrix yet. Please enter the matrix';
											var feedentrance = 0; 
											var totalentrance = 0;
											var feederearn = 0;
											var feederbonus  = 0;
											var total = 0;
											res.render('dashboard', {title: 'DASHBOARD', feederearn: feederearn, total: total, feedentrance: feedentrance, totalentrance: totalentrance, noenter: message, news: news, feederbonus: feederbonus, message: message});
										}else{
											//check the number of times he has entered the feeder stage
											db.query( 'SELECT COUNT(user) AS number FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
												if( err ) throw err;
												var feedentrance = results[0].number;
												var totalentrance = 0 + feedentrance;
												//check if the user is receiving
												db.query( 'SELECT * FROM order WHERE receiver = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
													if( err ) throw err;
													if( results.length === 0 ){
														//check for paid paymets
														db.query( 'SELECT * FROM order WHERE payer = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
															if( err ) throw err;
															if ( results.length === 0 ){
																// check for earnings
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', feederearn: feederearn, feederbonus: feederbonus, total: total,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', feederearn: feederearn, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}else{
																var payer = results;
																var info = 'YOU HAVE AN ORDER TO PAY SOMEONE!';
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', payer: payer, info: info, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', payer: payer, info: info, feederearn: feederearn, feederbonus: feederbonus, total: total, feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', payer: payer, info: info, feederearn: feederearn, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}
														});
													}else{
														var receiver = results;
														var order = 'SOMEONE WANTS TO PAY YOU!';
														db.query( 'SELECT * FROM order WHERE payer = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
															if( err ) throw err;
															if ( results.length === 0 ){
																// check for earnings
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', receiver: receiver, info: order, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', receiver: receiver, info: order, feederearn: feederearn, feederbonus: feederbonus, total: total, feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', feederearn: feederearn, receiver: receiver, info: order, a: tree.a, receiver: receiver, info: order, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}else{
																var payer = results;
																var order = 'YOU HAVE AN ORDER TO PAY SOMEONE!';
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', receiver: receiver, info: order, payer: payer, info: order, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', payer: payer, info: order, receiver: receiver, info: order, feederearn: feederearn, feederbonus: feederbonus, total: total, feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', payer: payer, info: order, feederearn: feederearn, receiver: receiver, info: order, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}
														});
													}
												});
											});
										}
									});
								}
							});
						});
					}else{
						//if an admin
						var admin = results[0].user;
						db.query( 'SELECT username FROM user WHERE user_id = ?', [currentUser], function ( err, results, fields ){
							if( err ) throw err;
							var username = results[0].username;
							//check if the user has updated his profile
							db.query( 'SELECT user FROM profile WHERE user = ?', [username], function ( err, results, fields ){
								if( err ) throw err;
								if( results.length === 0 ){
									var error = 'Please update your profile to see your stats.';
									res.render( 'dashboard', {admin: admin, title: 'DASHBOARD', error: error});
								}else{
									db.query( 'SELECT user FROM feeder WHERE user = ?', [username], function ( err, results, fields ){
										if( err ) throw err;
										if (results.length === 0){
											var message = 'You have not entered the matrix yet. Please enter the matrix';
											var feedentrance = 0; 
											var totalentrance = 0;
											var feederearn = 0;
											var feederbonus  = 0;
											var total = 0;
											res.render('dashboard', {admin: admin, title: 'DASHBOARD', feederearn: feederearn, total: total, feedentrance: feedentrance, totalentrance: totalentrance, noenter: message, feederbonus: feederbonus, message: message});
										}else{
											//check the number of times he has entered the feeder stage
											db.query( 'SELECT COUNT(user) AS number FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
												if( err ) throw err;
												var feedentrance = results[0].number;
												var totalentrance = 0 + feedentrance;
												//check if the user is receiving
												db.query( 'SELECT * FROM orders WHERE receiver = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
													if( err ) throw err;
													if( results.length === 0 ){
														//check for paid paymets
														db.query( 'SELECT * FROM orders WHERE payer = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
															if( err ) throw err;
															if ( results.length === 0 ){
																// check for earnings
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {admin: admin, title: 'DASHBOARD', feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', feederearn: feederearn, feederbonus: feederbonus, total: total, feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', feederearn: feederearn, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}else{
																var payer = results;
																var info = 'YOU HAVE AN ORDER TO PAY SOMEONE!';
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: info, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: info, feederearn: feederearn, feederbonus: feederbonus, total: total,  feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: info, feederearn: feederearn, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}
														});
													}else{
														var receiver = results;
														var order = 'SOMEONE WANTS TO PAY YOU!';
														db.query( 'SELECT * FROM order WHERE payer = ? and (status  = ? or status = ?) ', [username, 'pending', 'uploaded'], function ( err, results, fields ){
															if( err ) throw err;
															if ( results.length === 0 ){
																// check for earnings
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', receiver: receiver, admin: admin, info: order, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance, totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {title: 'DASHBOARD', admin: admin, receiver: receiver, info: order, feederearn: feederearn, feederbonus: feederbonus, total: total, feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {title: 'DASHBOARD', admin: admin, feederearn: feederearn, receiver: receiver, info: order, a: tree.a, receiver: receiver, info: order, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}else{
																var payer = results;
																var order = 'YOU HAVE AN ORDER TO PAY SOMEONE!';
																db.query( 'SELECT sum(feeder) as feeder, sum(feederbonus) as  feederbonus FROM earnings WHERE user = ?', [username], function ( err, results, fields ){
																	if( err ) throw err;
																	if( results.length === 0 ){
																		var feederearn = 0;
																		var feederbonus = 0;
																		var total = 0;
																		res.render ('dashboard', {title: 'DASHBOARD', admin: admin, receiver: receiver, info: order, payer: payer, info: order, feederbonus: feederbonus, feederearn: feederearn, total: total, feedentrance: feedentrance,  totalentrance: totalentrance, noearn: status, message: message});
																	}else{
																		//get the values of the earnings.
																		var feederearn = results[0].feeder;
																		var feederbonus = results[0].feederbonus;
																		var total = feederbonus + feederearn;
																		// get the legs.
																		db.query( 'SELECT a, b, c  FROM feeder_tree WHERE user = ?', [username], function ( err, results, fields ){
																			if( err ) throw err;
																			var last = results.slice( -1 )[0];
																			var tree = {
																				a: last.a,
																				b: last.b,
																				c: last.c
																			}
																			if( tree.a !== null && tree.b !== null && tree.c !== null  ){
																				var filled = "You have filled this cycle... please enter the matrix again";
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: order, receiver: receiver, info: order, feederearn: feederearn, feederbonus: feederbonus, total: total, feedentrance: feedentrance, totalentrance: totalentrance, filled: filled});
																			}else{
																				//render the host of them
																				res.render('dashboard', {admin: admin, title: 'DASHBOARD', payer: payer, info: order, feederearn: feederearn, receiver: receiver, info: order, a: tree.a, b: tree.b, c: tree.c, total: total, feedentrance: feedentrance,news: news, feederbonus: feederbonus,  totalentrance: totalentrance, tree: tree});
																			}
																		});
																	}
																});
															}
														});
													}
												});
											});
										}
									});
								}
							});
						});
					}
				});
			//});
		}
	});
	});